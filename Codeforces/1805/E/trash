#include <bits/stdc++.h>

#include <numeric>
using namespace std;

/* Macros {{{ */
/*  A lot of this is from some of Benq's submissions
    [https://codeforces.com/profile/Benq]
    Ugly af to the eyes, but with vim fold its barable
    Hopefully c++20 concepts can make all this stuff must cleaner */

/* Basics {{{ */
using ll = long long;
using ld = long double;
using str = string;

using pi = pair<int, int>;
using pll = pair<ll, ll>;
using pld = pair<ld, ld>;
#define mp make_pair
#define fi first
#define se second

#define arr array
#define ve vector
using vi = vector<int>;
using vll = vector<ll>;
using vld = vector<ld>;

using vpi = vector<pi>;
using vpll = vector<pll>;
using vpld = vector<pld>;

using vvi = vector<vi>;
using vvll = vector<vll>;
using vvld = vector<vld>;

using vvpi = vector<vpi>;
using vvpll = vector<vpll>;
using vvpld = vector<vpld>;

#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define sz size()
#define rsz(a) resize(a)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

#define For(i, a, b) for (int i = a; i < b; ++i)
#define Rof(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define rep(a) For(_, 0, a)
#define each(a, x) for (auto &a : x)
#define reach(a, x) for (auto a = x.rbegin(); a != x.rend(); ++a)

template <typename T, typename U>
inline void cmin(T &x, U y) {
    if (y < x) x = y;
}
template <typename T, typename U>
inline void cmax(T &x, U y) {
    if (x < y) x = y;
}
/*}}}*/

/* IO {{{ */

/* Template Macros {{{ */
#define tcT template <class T
#define tcTU tcT, class U
#define tcTUU tcT, class... U
/*}}}*/

inline namespace Helpers { /*{{{*/
tcT, class = void > struct is_iterable : false_type {};
tcT > struct is_iterable<
          T, void_t<decltype(begin(declval<T>())), decltype(end(declval<T>()))>>
    : true_type {};
tcT > constexpr bool is_iterable_v = is_iterable<T>::value;

tcT, class = void > struct is_readable : false_type {};
tcT > struct is_readable<T, typename std::enable_if_t<is_same_v<
                                decltype(cin >> declval<T &>()), istream &>>>
    : true_type {};
tcT > constexpr bool is_readable_v = is_readable<T>::value;

tcT, class = void > struct is_printable : false_type {};
tcT > struct is_printable<T, typename std::enable_if_t<is_same_v<
                                 decltype(cout << declval<T>()), ostream &>>>
    : true_type {};
tcT > constexpr bool is_printable_v = is_printable<T>::value;
} /* namespace Helpers */
/*}}}*/

inline namespace Input { /*{{{*/
tcT > constexpr bool needs_input_v = !is_readable_v<T> && is_iterable_v<T>;
tcTUU > void re(T &t, U &...u);
tcTU > void re(pair<T, U> &p); /* pairs */

/* re: read{{{ */
tcT > typename enable_if<is_readable_v<T>, void>::type re(T &x) {
    cin >> x;
} /* default */
tcT > typename enable_if<needs_input_v<T>, void>::type re(
          T &i);                                   // vectors, arrays, etc...
tcTU > void re(pair<T, U> &p) { re(p.fi, p.se); }  // pairs
tcT > typename enable_if<needs_input_v<T>, void>::type re(T &i) {
    each(x, i) re(x);
}
tcTUU > void re(T &t, U &...u) {
    re(t);
    re(u...);
} /* read multiple}}} */

/* rv: resize and read vectors{{{ */
void rv(size_t) {}
tcTUU > void rv(size_t N, ve<T> &t, U &...u);
template <class... U>
void rv(size_t, size_t N2, U &...u);
tcTUU > void rv(size_t N, ve<T> &t, U &...u) {
    t.rsz(N);
    re(t);
    rv(N, u...);
}
template <class... U>
void rv(size_t, size_t N2, U &...u) {
    rv(N2, u...);
} /*}}}*/

/* dumb shortcuts to read in ints{{{ */
void decrement() {} /* subtract one from each */
tcTUU > void decrement(T &t, U &...u) {
    --t;
    decrement(u...);
}
#define ints(...)    \
    int __VA_ARGS__; \
    re(__VA_ARGS__);
#define int1(...)      \
    ints(__VA_ARGS__); \
    decrement(__VA_ARGS__); /*}}}*/
} /* namespace Input */
/*}}}*/

inline namespace ToString { /*{{{*/
tcT > constexpr bool needs_output_v = !is_printable_v<T> && is_iterable_v<T>;

/* ts: string representation to print */
tcT > typename enable_if<is_printable_v<T>, str>::type ts(T v) {
    stringstream ss;
    ss << fixed << setprecision(15) << v;
    return ss.str();
} /* default */
tcT > str bit_vec(T t) { /* bit vector to string */
    str res = "{";
    For(i, 0, t.sz) res += ts(t[i]);
    res += "}";
    return res;
}
str ts(ve<bool> v) { return bit_vec(v); }
template <size_t SZ>
str ts(bitset<SZ> b) {
    return bit_vec(b);
} /* bit vector */
tcTU > str ts(pair<T, U> p); /* pairs */
tcT > typename enable_if<needs_output_v<T>, str>::type ts(
          T v); /* vectors, arrays */
tcTU > str ts(pair<T, U> p) { return "(" + ts(p.fi) + ", " + ts(p.se) + ")"; }
tcT > typename enable_if<is_iterable_v<T>, str>::type ts_sep(T v, str sep) {
    /* convert container to string w/ separator sep */
    bool fst = 1;
    str res = "";
    for (const auto &x : v) {
        if (!fst) res += sep;
        fst = 0;
        res += ts(x);
    }
    return res;
}
tcT > typename enable_if<needs_output_v<T>, str>::type ts(T v) {
    return "{" + ts_sep(v, ", ") + "}";
}

/* for nested DS */
template <int, class T>
typename enable_if<!needs_output_v<T>, ve<str>>::type ts_lev(const T &v) {
    return {ts(v)};
}
template <int lev, class T>
typename enable_if<needs_output_v<T>, ve<str>>::type ts_lev(const T &v) {
    if (lev == 0 || !v.sz) return {ts(v)};
    ve<str> res;
    for (const auto &t : v) {
        if (res.sz) res.back() += ",";
        ve<str> tmp = ts_lev<lev - 1>(t);
        res.insert(end(res), all(tmp));
    }
    For(i, 0, res.sz) {
        str bef = " ";
        if (i == 0) bef = "{";
        res[i] = bef + res[i];
    }
    res.back() += "}";
    return res;
}
} /* namespace ToString */
/*}}}*/

inline namespace Output { /*{{{*/
template <class T>
void pr_sep(ostream &os, str, const T &t) {
    os << ts(t);
}
template <class T, class... U>
void pr_sep(ostream &os, str sep, const T &t, const U &...u) {
    pr_sep(os, sep, t);
    os << sep;
    pr_sep(os, sep, u...);
}
/* print w/ no spaces */
template <class... T>
void pr(const T &...t) {
    pr_sep(cout, "", t...);
}
/* print w/ spaces, end with newline */
void ps() { cout << "\n"; }
template <class... T>
void ps(const T &...t) {
    pr_sep(cout, " ", t...);
    ps();
}
/* debug to cerr */
template <class... T>
void dbg_out(const T &...t) {
    pr_sep(cerr, " | ", t...);
    cerr << endl;
}
void loc_info(int line, str names) {
    cerr << "Line(" << line << ") -> [" << names << "]: ";
}
template <int lev, class T>
void dbgl_out(const T &t) {
    cerr << "\n\n" << ts_sep(ts_lev<lev>(t), "\n") << "\n" << endl;
}
} /* namespace Output */
/*}}}}}}}}}*/

int n;
vi a;
vpi edges;

// Program showing a policy-based data structure.
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
#include <iostream>
using namespace __gnu_pbds;
using namespace std;

// a new data structure defined. Please refer below
// GNU link : https://goo.gl/WVDL6g
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;

void read_input() {
    re(n);
    edges.clear();
    rep(n-1) { int1(u, v); edges.pb({u, v}); }
    rv(n, a);
}

vvi mtree;
void pop_mtree() {
    mtree.assign(n, vi());
    for(auto [u, v] : edges) mtree[u].pb(v), mtree[v].pb(u);
}

vi parent;
void pop_parent_aux(int r, int p) {
    if (parent[r] >= 0) return;
    parent[r] = p;
    each(c, mtree[r]) pop_parent_aux(c, r);
}

void pop_parent() {
    parent.assign(n, -1);
    pop_parent_aux(0, 0);
}

vi depths;
void pop_depths(int r=0, int p=0) {
    depths[r] = depths[p] + 1;
    each(c, mtree[r]) if (c != p)
        pop_depths(c, r);
}

vi order;
void pop_order() {
    depths.assign(n, -1);
    pop_depths();

    order.rsz(n);
    iota(all(order), 0);
    sort(all(order), [](auto l, auto r){ return depths[l] > depths[r]; });
}

map<int, int> vcounts;
vi madcand;
void pop_vcounts() {
    each(v, a) ++vcounts[v];
    each(v, a) if (vcounts[v] >= 2) madcand.pb(v);
    sort(all(madcand));
}

// Idea: Maintain set of the value counst of submtrees
//      In each step, we take the largest such child set (O(1)) and then merge all other child sets to it
//      suppose some node u is inserted over log(n) times
//      it would follow that for over log(n) nodes, u belongs to a submtree of that node that is not the largest one
//      enumerate these nodes sorted by number of children with αᵢ
//      since a[i] ⊂ a[i+1], and not selected, |a[i+1]| ≥ 2*a[i]
//      but then a[i] ≥ 2ⁱ giving a contradiction

vi gmad() {
    ve<map<int, int>> mem1(n, map<int, int>());
    ve<set<int>> mem2(n, set<int>()); // set of elements that appear at least twice in mem1
    ve<ordered_set> mem3(n, ordered_set()); // set of elements that appear at least vcounts-2 times (with vcounts>=2)

    For(i, 0, n) {
        ++mem1[i][a[i]];
        if (vcounts[a[i]] == 2) mem3[i].insert(a[i]);
    }

    vi mad(n, 0);
    each(u, order) {
        each(c, mtree[u]) if (mem1[u].sz < mem1[c].sz)
            swap(mem1[u], mem1[c]), swap(mem2[u], mem2[c]), swap(mem3[u], mem3[c]);

        each(c, mtree[u]) for(auto [vr, vc] : mem1[c]) {
            if (mem1[u][vr] <= 1 && mem1[u][vr] + vc >= 2) mem2[u].insert(vr);
            if (vcounts[vr] - mem1[u][vr] >= 2 && vcounts[vr] - (mem1[u][vr] + vc) < 2) mem3[u].insert(vr);
            mem1[u][vr] += vc;
        }

        int umad = (mem2[u].sz) ? *mem2[u].rbegin() : 0; // mad of submtree

        int pmad=0;
        if (madcand.sz > mem3[u].sz) {
            int l=0, r=madcand.sz-1; // binary search for largest number in vcands that is not in mem3[u]
            while(l < r) {
                int m = (l+r+1)/2;

                int real_dist = madcand.sz - m; // order of elements after it (inclusive)
                int cur_dist = mem3[u].sz - mem3[u].order_of_key(m) + (*mem3[u].find(m) == m); // order of elements after it (inclusive)

                if (real_dist > cur_dist) l = m;
                else r = m-1;
            }
            pmad = madcand[l];
        }
        // ps(pmad);

        mad[u] = max(umad, pmad);
    }

    return mad;
}

void solve() {
    read_input();
    pop_mtree();
    pop_parent();
    pop_order();
    pop_vcounts();

    vi mad = gmad();
    for(auto [u, v] : edges) {
        if (parent[u] == v) ps(mad[u]);
        else ps(mad[v]);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    /* cout << fixed << setprecision(6); */
    int t = 1;
    // cin >> t;
    for (int i = 0; i < t; i++) solve();

    return 0;
    // you should actually read the stuff at the bottom
}

/* stuff you should look for
 * int overflow, array bounds
 * special cases (n=1?)
 * do smth instead of nothing and stay organized
 * WRITE STUFF DOWN
 * DON'T GET STUCK ON ONE APPROACH
 */
