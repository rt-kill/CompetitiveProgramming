#include <bits/stdc++.h>
using namespace std;

int n, b[350], a[350][350];

int main() {
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> b[i];

    // Let a be a matrix for which property 2 holds:
    //  property 2 is preserved under addition to all values of a
    //  property 2 is preserved under addition to an entire column of a
    //  property 2 is preserved under addition to an entire row of a
    //  property 2 is preserved under permutation of rows
    //  property 2 is preserved under permutation of cols

    // multiplying by 0 < k < n, will permute the elements and preserve b

    // Idea, find a trivial matrix for which property 2 is true
    // do column addition so that all values are b[i]

    // a != b (mod n)
    //  if a and b are less than n, then a != b (mod n)

    //  if n <= a < 2n - 1,

    // n is prime -- z[n] is generated by every element
    //  x*a = b (mod n)
    //  (a + b) = (a + c) (mod n) <=> (b = c)
    //  a^n = a (mod n)
    //  gcd(a, b) = m -> ka + cb = m

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            cout << (((i * j) - (i * i) + b[i]) % n + n) % n << ' ';
        cout << '\n';
    }

    return 0;
}
