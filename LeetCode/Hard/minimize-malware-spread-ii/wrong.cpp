#include <bits/stdc++.h>
using namespace std;

/* Macros {{{ */
/* Basics {{{ */
using ll    = long long;
using ull   = unsigned long long;
using ld    = long double;
using str   = string;

using pi    = pair<int,int>;
using pll   = pair<ll, ll>;
using pld   = pair<ld, ld>;

using vi    = vector<int>;
using vll   = vector<ll>;
using vld   = vector<ld>;

using vpi   = vector<pi>;
using vpll  = vector<pll>;
using vpld  = vector<pld>;

using vvi   = vector<vi>;
using vvll  = vector<vll>;
using vvld  = vector<vld>;

using vvpi  = vector<vpi>;
using vvpll = vector<vpll>;
using vvpld = vector<vpld>;

#define arr     array
#define ve      vector
#define pb      push_back
#define rsz(a)  resize(a)
#define mp      make_pair
#define fi      first
#define se      second
#define all(x)  x.begin(),x.end()
#define rall(x) x.rbegin(),x.rend()
#define sz      size()

#define For(i, a, b)    for(int i=a; i<b; ++i)
#define Rof(i, a, b)    for(int i = (b)-1; i >= (a); --i)
#define rep(a)          For(_, 0, a)
#define each(a, x)      for(auto &a : x)
#define reach(a, x)     for(auto a = x.rbegin(); a != x.rend(); ++a)

template<typename T, typename U> inline void cmin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void cmax(T &x, U y) { if(x < y) x = y; }
/*}}}*/

/* IO {{{ */
// Read
#define _re_(a)     cin >> a;
#define re(...)     FOR_EACH(_re_, __VA_ARGS__)

#define rev(a, x)   x.rsz(a); each(b, x) _re_(b);
#define rewv(a, x)  _re_(a); rev(a, x);

#define _rdi_(a)    int a; _re_(a)
#define rdi(...)    FOR_EACH(_rdi_, __VA_ARGS__)

#define _rdll_(a)   ll a; _re_(a)
#define rdll(...)   FOR_EACH(_rdll_, __VA_ARGS__)

#define _pr_(a)     cout << a << ' ';
#define pr(...)     FOR_EACH(_pr_, __VA_ARGS__)

#define _ln_(...)       cout << '\n';
#define ln()            cout << '\n';
#define _pln_aux_(a)    cout << a << '\n';
#define _pln_(...)      FOR_EACH(_pln_aux_, __VA_ARGS__)
/* #define _pln_fork_(...) TENTH_PARAM(__VA_ARGS__,_pln_,_pln_,_pln_,_pln_,_pln_,_pln_,_pln_,_pln_,_ln_)(__VA_ARGS__) */
#define pln(...)        _pln_(__VA_ARGS__)

/* IO - Helpers {{{*/
#define TENTH_PARAM(_0,_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME

#define PARENS ()
#define EXPAND(arg)     EXPAND1(EXPAND1(EXPAND1(EXPAND1(arg))))
#define EXPAND1(arg)    EXPAND2(EXPAND2(EXPAND2(EXPAND2(arg))))
#define EXPAND2(arg)    EXPAND3(EXPAND3(EXPAND3(EXPAND3(arg))))
#define EXPAND3(arg)    EXPAND4(EXPAND4(EXPAND4(EXPAND4(arg))))
#define EXPAND4(arg)    arg

#define FOR_EACH(macro, ...)                                    \
  __VA_OPT__(EXPAND(FOR_EACH_HELPER(macro, __VA_ARGS__)))
#define FOR_EACH_HELPER(macro, a1, ...)                         \
  macro(a1)                                                     \
  __VA_OPT__(FOR_EACH_AGAIN PARENS (macro, __VA_ARGS__))
#define FOR_EACH_AGAIN() FOR_EACH_HELPER
/*}}}*//*}}}*//*}}}*/

class Solution {
private:
    vvi adj;
    vi infected;
public:
    vi seen;
    int isInfected(int r) {
        if (seen[r]) return 0;
        seen[r] = 1;

        if (infected[r]) return 1;

        int res = 0;
        each(c, adj[r]) res |= isInfected(c);
        return res;
    }

    void spreadInfection(int r) {
        if (seen[r]) return;
        seen[r] = 1;

        infected[r] = 1;
        each(c, adj[r]) spreadInfection(r);
    }

    int countNums(int r) {
        if (seen[r]) return 0;
        seen[r] = 1;

        int res = 1;
        each(c, adj[r]) res += countNums(c);
        return res;
    }


    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        adj.assign(graph.sz, vi());
        For(r, 0, graph.sz) For(c, 0, graph[0].sz) if (graph[r][c])
            adj[r].pb(c);

        int res=0, M=-1;
        each(u, initial) {
            infected.assign(graph.sz, 0);
            each(v, initial) infected[v] = 1;

            seen.assign(graph.sz, 0);
            seen[u] = 1;

            each(c, adj[u]) infected[c] = isInfected(c);

            seen.assign(graph.sz, 0);
            seen[u] = 1;

            each(c, adj[u]) if (infected[c])
                spreadInfection(c);

            seen.assign(graph.sz, 0);
            seen[u] = 1;

            int cr = 0;
            each(c, adj[u]) if (!infected[c])
                cr += countNums(c);

            if (cr == M) cmin(res, u);
            else if (cr > M) res=u, M=cr;
        }

        return res;
    }
};

int main() {
    auto s = Solution();
    vvi graph;
    vi initial;
    int res;

    graph = {{1,1,0},{1,1,0},{0,0,1}}, initial = { 0, 1 };
    res = s.minMalwareSpread(graph, initial);
    pln(res);

    graph = {{1,1,0},{1,1,1},{0,1,1}}, initial = { 0, 1 };
    res = s.minMalwareSpread(graph, initial);
    pln(res);

    graph = {{1,1,0,0},{1,1,1,0},{0,1,1,1},{0,0,1,1}}, initial = { 0, 1 };
    res = s.minMalwareSpread(graph, initial);
    pln(res);

    graph = {{1,0,0,1},{0,1,1,0},{0,1,1,0},{1,0,0,1}}, initial = { 3, 1 };
    res = s.minMalwareSpread(graph, initial);
    pln(res);

    return 0;
}
